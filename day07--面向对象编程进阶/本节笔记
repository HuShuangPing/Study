#!/usr/bin/env python
# -*- coding:utf-8 -*-
# Author:HuShuangPing

类
    属性
        实例变量
        类变量
        私有属性__var
    方法
       构造方法，
       析构函数
       私有方法

对象:实例化一个类之后得到的对象




封装
   把一些功能的实现细节不对外暴露

继承
    继承 ，组合

    代码的重用
    单继承
    多继承，
        2.7 经典类，深度优先，  新式类，广度优先
        3.x 均是广度优先
        class Foo(object):
            def __init__(self,name,age,sex,salary,course):

                self.salary = salary
                self.course = course



多态
    接口重用， 一种接口，多种实现

静态方法
    只是名义上归类管理， 实际上在静态方法里访问不了类或实例中的任何属性
类方法
    只能访问类变量，不能访问实例变量

属性方法
    把一个方法变成一个静态属性
    对于用户来说只需要一步实现，但在背后实现了很多步骤

特殊的成员方法
（具体代码看属性方法）
1. __doc__　　表示类的描述信息
2. __module__ 和  __class__
　　__module__ 表示当前操作的对象在那个模块

　　__class__     表示当前操作的对象的类是什么

3.  __call__ 对象后面加括号，触发执行。
注：构造方法的执行是由创建对象触发的，即：对象 = 类名() ；而对于 __call__ 方法的执行是由对象后加括号触发的，即：对象() 或者 类()()

4.  __dict__ 查看类或对象中的所有成员

5.  __str__ 如果一个类中定义了__str__方法，那么在打印 对象 时，默认输出该方法的返回值。

6. __getitem__、__setitem__、__delitem__
   用于索引操作，如字典。以上分别表示获取、设置、删除数据

7. __new__ \ __metaclass__
   __metaclass__  原类


反射
--通过字符串映射或修改程序运行时的状态、属性、方法, 有以下4个方法：
    hasattr(obj,name_str) , 判断一个对象obj里是否有对应的name_str字符串的方法
    getattr(obj,name_str), 根据字符串去获取obj对象里的对应的方法的内存地址
    setattr(obj,'y',z), is equivalent to ``x.y = v''
    delattr


异常
    try :
        code
    except (Error1,Erro2) as e:
        print e

    except Exception :抓住所有错误，不建议用
    语法错误，是没办法抓住的




Socket网络编程
